import { AUDIT_CONSTANTS } from "@/constants/auditConstants";

/**
 * This maps various event types to standardized action types.
 * It ensures consistent categorization of actions across different events,
 * facilitating easier analysis and reporting in audit logs.
 */

export const mapEventTypeToAction = (eventType: string): string => {
  const actionMap: Record<string, string> = {
    USER_LOGIN: AUDIT_CONSTANTS.ACTION_TYPES.LOGIN,
    USER_LOGOUT: AUDIT_CONSTANTS.ACTION_TYPES.LOGOUT,
    USER_CREATED: AUDIT_CONSTANTS.ACTION_TYPES.CREATE,
    USER_UPDATED: AUDIT_CONSTANTS.ACTION_TYPES.UPDATE,
    USER_DEACTIVATED: AUDIT_CONSTANTS.ACTION_TYPES.DELETE,
    PATIENT_CREATED: AUDIT_CONSTANTS.ACTION_TYPES.CREATE,
    PATIENT_UPDATED: AUDIT_CONSTANTS.ACTION_TYPES.UPDATE,
    PATIENT_ACCESSED: AUDIT_CONSTANTS.ACTION_TYPES.ACCESS,
    EHR_CREATED: AUDIT_CONSTANTS.ACTION_TYPES.CREATE,
    EHR_UPDATED: AUDIT_CONSTANTS.ACTION_TYPES.UPDATE,
    EHR_ACCESSED: AUDIT_CONSTANTS.ACTION_TYPES.ACCESS,
    DOCUMENT_UPLOADED: AUDIT_CONSTANTS.ACTION_TYPES.CREATE,
    DOCUMENT_ACCESSED: AUDIT_CONSTANTS.ACTION_TYPES.ACCESS,
    APPOINTMENT_CREATED: AUDIT_CONSTANTS.ACTION_TYPES.CREATE,
    APPOINTMENT_UPDATED: AUDIT_CONSTANTS.ACTION_TYPES.UPDATE,
    APPOINTMENT_CANCELLED: AUDIT_CONSTANTS.ACTION_TYPES.DELETE,
    PRESCRIPTION_CREATED: AUDIT_CONSTANTS.ACTION_TYPES.CREATE,
    PRESCRIPTION_UPDATED: AUDIT_CONSTANTS.ACTION_TYPES.UPDATE,
    ORDER_PLACED: AUDIT_CONSTANTS.ACTION_TYPES.CREATE,
    INVENTORY_UPDATED: AUDIT_CONSTANTS.ACTION_TYPES.UPDATE,
    INVOICE_CREATED: AUDIT_CONSTANTS.ACTION_TYPES.CREATE,
    BACKUP_CREATED: AUDIT_CONSTANTS.ACTION_TYPES.CREATE,
    SYSTEM_ERROR: AUDIT_CONSTANTS.ACTION_TYPES.ERROR,
    SECURITY_VIOLATION: AUDIT_CONSTANTS.ACTION_TYPES.VIOLATION,
    HTTP_POST_REQUEST: AUDIT_CONSTANTS.ACTION_TYPES.ACCESS,
    HTTP_GET_REQUEST: AUDIT_CONSTANTS.ACTION_TYPES.ACCESS,
    HTTP_PUT_REQUEST: AUDIT_CONSTANTS.ACTION_TYPES.UPDATE,
    HTTP_DELETE_REQUEST: AUDIT_CONSTANTS.ACTION_TYPES.DELETE,
  };

  return actionMap[eventType] || AUDIT_CONSTANTS.ACTION_TYPES.ACCESS;
};

export const mapEventTypeToResourceType = (eventType: string): string => {
  const resourceMap: Record<string, string> = {
    PATIENT_CREATED: AUDIT_CONSTANTS.RESOURCE_TYPES.PATIENT_RECORD,
    PATIENT_UPDATED: AUDIT_CONSTANTS.RESOURCE_TYPES.PATIENT_RECORD,
    PATIENT_ACCESSED: AUDIT_CONSTANTS.RESOURCE_TYPES.PATIENT_RECORD,
    EHR_CREATED: AUDIT_CONSTANTS.RESOURCE_TYPES.PATIENT_RECORD,
    EHR_UPDATED: AUDIT_CONSTANTS.RESOURCE_TYPES.PATIENT_RECORD,
    EHR_ACCESSED: AUDIT_CONSTANTS.RESOURCE_TYPES.PATIENT_RECORD,
    APPOINTMENT_CREATED: AUDIT_CONSTANTS.RESOURCE_TYPES.APPOINTMENT,
    APPOINTMENT_UPDATED: AUDIT_CONSTANTS.RESOURCE_TYPES.APPOINTMENT,
    APPOINTMENT_CANCELLED: AUDIT_CONSTANTS.RESOURCE_TYPES.APPOINTMENT,
    PRESCRIPTION_CREATED: AUDIT_CONSTANTS.RESOURCE_TYPES.PRESCRIPTION,
    PRESCRIPTION_UPDATED: AUDIT_CONSTANTS.RESOURCE_TYPES.PRESCRIPTION,
    INVOICE_CREATED: AUDIT_CONSTANTS.RESOURCE_TYPES.BILLING_INFO,
  };

  return resourceMap[eventType] || AUDIT_CONSTANTS.RESOURCE_TYPES.SYSTEM_CONFIG;
};

export function determineEventHub(eventType: string): string {
  const eventHubMap: Record<string, string> = {
    USER_LOGIN: "SECURITY",
    USER_LOGOUT: "SECURITY",
    USER_CREATED: "SECURITY",
    USER_UPDATED: "SECURITY",
    USER_DEACTIVATED: "SECURITY",
    SECURITY_VIOLATION: "SECURITY",
    PATIENT_CREATED: "PATIENT",
    PATIENT_UPDATED: "PATIENT",
    PATIENT_ACCESSED: "PATIENT",
    EHR_CREATED: "PATIENT",
    EHR_UPDATED: "PATIENT",
    EHR_ACCESSED: "PATIENT",
    DOCUMENT_UPLOADED: "PATIENT",
    DOCUMENT_ACCESSED: "PATIENT",
    APPOINTMENT_CREATED: "CLINICAL",
    APPOINTMENT_UPDATED: "CLINICAL",
    APPOINTMENT_CANCELLED: "CLINICAL",
    PRESCRIPTION_CREATED: "CLINICAL",
    PRESCRIPTION_UPDATED: "CLINICAL",
    ORDER_PLACED: "CLINICAL",
    WORKFLOW_STEP_COMPLETED: "CLINICAL",
    INVENTORY_UPDATED: "INVENTORY",
    INVOICE_CREATED: "INVENTORY",
    BACKUP_CREATED: "SYSTEM",
    BACKUP_RESTORED: "SYSTEM",
    POLICY_UPDATED: "SYSTEM",
    MAINTENANCE_SCHEDULED: "SYSTEM",
    SYSTEM_ERROR: "SYSTEM",
    HTTP_POST_REQUEST: "SYSTEM",
    HTTP_GET_REQUEST: "SYSTEM",
    HTTP_PUT_REQUEST: "SYSTEM",
    HTTP_DELETE_REQUEST: "SYSTEM",
    HTTP_PATCH_REQUEST: "SYSTEM",
  };

  return eventHubMap[eventType] || "SYSTEM";
}

