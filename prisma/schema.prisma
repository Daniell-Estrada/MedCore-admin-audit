// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventType {
  USER_LOGIN
  USER_LOGOUT
  USER_LOGIN_FAILED
  USER_CREATED
  USER_UPDATED
  USER_DEACTIVATED
  USER_PASSWORD_CHANGED
  USER_ROLE_CHANGED
  USER_2FA_ENABLED
  USER_2FA_DISABLED
  USER_SESSION_EXPIRED
  PATIENT_CREATED
  PATIENT_UPDATED
  PATIENT_ACCESSED
  PATIENT_SEARCHED
  PATIENT_EXPORTED
  EHR_CREATED
  EHR_UPDATED
  EHR_ACCESSED
  EHR_PRINTED
  DOCUMENT_UPLOADED
  DOCUMENT_ACCESSED
  DOCUMENT_DOWNLOADED
  DOCUMENT_DELETED
  APPOINTMENT_CREATED
  APPOINTMENT_UPDATED
  APPOINTMENT_CANCELLED
  APPOINTMENT_COMPLETED
  APPOINTMENT_NO_SHOW
  PRESCRIPTION_CREATED
  PRESCRIPTION_UPDATED
  PRESCRIPTION_DISPENSED
  ORDER_PLACED
  ORDER_COMPLETED
  ORDER_CANCELLED
  WORKFLOW_STEP_COMPLETED
  CONSULTATION_STARTED
  CONSULTATION_COMPLETED
  MESSAGE_SENT
  MESSAGE_RECEIVED
  NOTIFICATION_SENT
  TELEMEDICINE_SESSION_STARTED
  TELEMEDICINE_SESSION_ENDED
  INVENTORY_UPDATED
  INVENTORY_LOW_STOCK
  INVOICE_CREATED
  INVOICE_UPDATED
  PAYMENT_PROCESSED
  BACKUP_CREATED
  BACKUP_RESTORED
  BACKUP_FAILED
  POLICY_UPDATED
  MAINTENANCE_SCHEDULED
  MAINTENANCE_STARTED
  MAINTENANCE_COMPLETED
  SYSTEM_ERROR
  SECURITY_VIOLATION
  DATA_BREACH_DETECTED
  UNAUTHORIZED_ACCESS_ATTEMPT
  SYSTEM_STARTUP
  SYSTEM_SHUTDOWN
  HTTP_POST_REQUEST
  HTTP_GET_REQUEST
  HTTP_PUT_REQUEST
  HTTP_DELETE_REQUEST
  HTTP_PATCH_REQUEST
}

enum UserRole {
  ADMINISTRADOR
  MEDICO
  ENFERMERA
  PACIENTE
  SISTEMA
  FARMACEUTICO
  TECNICO
}

enum SeverityLevel {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ActionType {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  ACCESS
  SEARCH
  EXPORT
  PRINT
  DOWNLOAD
  UPLOAD
  SEND
  RECEIVE
  START
  COMPLETE
  CANCEL
  ERROR
  VIOLATION
}

enum ResourceType {
  PATIENT_RECORD
  EHR_DOCUMENT
  APPOINTMENT
  PRESCRIPTION
  MEDICAL_ORDER
  BILLING_INFO
  USER_ACCOUNT
  SYSTEM_CONFIG
  INVENTORY_ITEM
  COMMUNICATION
  BACKUP_FILE
  AUDIT_LOG
}

enum PolicyCategory {
  SECURITY
  RETENTION
  BACKUP
  SESSION
  PRIVACY
  COMPLIANCE
  NOTIFICATION
  ACCESS_CONTROL
}

enum BackupType {
  FULL
  INCREMENTAL
  DIFFERENTIAL
  ARCHIVE
}

enum OperationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
  SCHEDULED
  EXPIRED
  COMPLIANT
  NON_COMPLIANT
  UNDER_REVIEW
  RECEIVED
  PROCESSING
}

enum DataType {
  AUDIT_LOGS
  PATIENT_DATA
  SYSTEM_LOGS
  BACKUPS
  USER_DATA
  CLINICAL_DATA
  BILLING_DATA
  COMMUNICATION_DATA
}

enum AlertType {
  SECURITY
  PERFORMANCE
  MAINTENANCE
  ERROR
  COMPLIANCE
  BACKUP
  SYSTEM_HEALTH
}

enum ComplianceStandard {
  HIPAA
  GDPR
  SOC2
  HITECH
  FDA
}

model AuditLog {
  id               String            @id @default(uuid())
  eventType        EventType
  userId           String?
  userRole         UserRole?
  targetUserId     String?
  patientId        String?
  resourceType     ResourceType?
  resourceId       String?
  action           ActionType
  description      String?
  ipAddress        String?
  userAgent        String?
  sessionId        String?
  severityLevel    SeverityLevel     @default(LOW)
  metadata         Json?
  success          Boolean           @default(true)
  errorMessage     String?
  hipaaCompliant   Boolean           @default(false)
  accessReason     String?
  checksum         String?
  createdAt        DateTime          @default(now())
  complianceEvents ComplianceEvent[]

  @@index([eventType])
  @@index([userId])
  @@index([patientId])
  @@index([createdAt])
  @@index([severityLevel])
  @@index([resourceType])
  @@index([hipaaCompliant])
  @@map("audit_logs")
}

model SystemPolicy {
  id          String         @id @default(uuid())
  name        String         @unique
  category    PolicyCategory
  description String?
  value       Json
  isActive    Boolean        @default(true)
  version     Int            @default(1)

  createdBy String
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  policyHistory PolicyHistory[]

  @@index([category])
  @@index([isActive])
  @@index([name])
  @@map("system_policies")
}

model PolicyHistory {
  id       String       @id @default(uuid())
  policyId String
  policy   SystemPolicy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  oldValue   Json?
  newValue   Json
  changeType ActionType
  reason     String?

  changedBy String
  changedAt DateTime @default(now())

  @@index([policyId])
  @@index([changedAt])
  @@map("policy_history")
}

model BackupOperation {
  id           String          @id @default(uuid())
  type         BackupType
  status       OperationStatus
  filePath     String?
  fileName     String?
  fileSize     BigInt?
  checksum     String?
  startedAt    DateTime        @default(now())
  completedAt  DateTime?
  duration     Int?
  errorMessage String?
  retryCount   Int             @default(0)
  createdBy    String
  metadata     Json?
  expiresAt    DateTime?

  @@index([status])
  @@index([startedAt])
  @@index([type])
  @@index([expiresAt])
  @@map("backup_operations")
}

model MaintenanceWindow {
  id               String          @id @default(uuid())
  title            String
  description      String?
  startTime        DateTime
  endTime          DateTime
  status           OperationStatus
  affectedServices String[]
  impactLevel      SeverityLevel   @default(MEDIUM)
  notificationSent Boolean         @default(false)
  notifiedUsers    String[]
  createdBy        String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([status])
  @@index([startTime])
  @@index([endTime])
  @@map("maintenance_windows")
}

model UserSession {
  id                String    @id @default(uuid())
  userId            String
  userRole          String
  sessionToken      String    @unique
  ipAddress         String?
  userAgent         String?
  location          String?
  isActive          Boolean   @default(true)
  lastActivity      DateTime  @default(now())
  expiresAt         DateTime
  is2FAVerified     Boolean   @default(false)
  riskScore         Float?
  createdAt         DateTime  @default(now())
  terminatedAt      DateTime?
  terminationReason String?

  @@index([userId])
  @@index([sessionToken])
  @@index([isActive])
  @@index([expiresAt])
  @@index([lastActivity])
  @@map("user_sessions")
}

model DataRetention {
  id                 String               @id @default(uuid())
  dataType           DataType
  retentionDays      Int
  lastCleanup        DateTime?
  recordsDeleted     Int?
  nextCleanup        DateTime?
  isActive           Boolean              @default(true)
  complianceStandard ComplianceStandard[]
  legalHold          Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@index([dataType])
  @@index([isActive])
  @@index([nextCleanup])
  @@map("data_retention")
}

model SystemAlert {
  id          String        @id @default(uuid())
  type        AlertType
  severity    SeverityLevel
  title       String
  message     String
  source      String
  isResolved  Boolean       @default(false)
  resolvedBy  String?
  resolvedAt  DateTime?
  resolution  String?
  escalated   Boolean       @default(false)
  escalatedAt DateTime?
  escalatedTo String?
  metadata    Json?
  tags        String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([type])
  @@index([severity])
  @@index([isResolved])
  @@index([createdAt])
  @@index([source])
  @@map("system_alerts")
}

model ComplianceEvent {
  id                  String             @id @default(uuid())
  auditLogId          String
  auditLog            AuditLog           @relation(fields: [auditLogId], references: [id])
  standard            ComplianceStandard
  requirement         String
  status              OperationStatus
  riskLevel           SeverityLevel      @default(LOW)
  riskDescription     String?
  remediationRequired Boolean            @default(false)
  remediationPlan     String?
  remediationDueDate  DateTime?
  remediationStatus   String?
  reportedToAuthority Boolean            @default(false)
  reportedAt          DateTime?
  reportReference     String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  @@index([auditLogId])
  @@index([standard])
  @@index([status])
  @@index([riskLevel])
  @@map("compliance_events")
}

model SystemMetrics {
  id            String   @id @default(uuid())
  cpuUsage      Float?
  memoryUsage   Float?
  diskUsage     Float?
  activeUsers   Int?
  requestCount  Int?
  errorCount    Int?
  responseTime  Float?
  dbConnections Int?
  dbQueryTime   Float?
  customMetrics Json?
  recordedAt    DateTime @default(now())

  @@index([recordedAt])
  @@map("system_metrics")
}

model EventProcessingStatus {
  id           String    @id @default(uuid())
  eventId      String    @unique
  eventType    String
  source       String
  status       String
  processedAt  DateTime?
  retryCount   Int       @default(0)
  maxRetries   Int       @default(3)
  errorMessage String?
  lastError    DateTime?
  sentToDLQ    Boolean   @default(false)
  dlqReason    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([eventId])
  @@index([status])
  @@index([source])
  @@index([createdAt])
  @@map("event_processing_status")
}
